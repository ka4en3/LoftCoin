package com.akchimwf.loftcoin1.util;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentFactory;

import java.util.Map;

import javax.inject.Inject;
import javax.inject.Provider;

import timber.log.Timber;


/*custom implementation of FragmentFactory*/
public class CustomFragmentFactory extends FragmentFactory {

    /*Provides instances of T. Typically implemented by an injector. For any type T that can be injected, you can also inject Provider<T>.*/
    private final Map<Class<?>, Provider<Fragment>> providers;

    /*dependency Map<Class<?>, Provider<Fragment>> - generated by Dagger from MainUIComponent from MainModule*/
    @Inject   //is necessary in constructor if using for DI
    public CustomFragmentFactory(Map<Class<?>, Provider<Fragment>> providers) {
        this.providers = providers;
    }

    @NonNull
    @Override
    public Fragment instantiate(@NonNull ClassLoader classLoader, @NonNull String className) {
        /*creating Fragments with Dagger*/
        try {
            /*get Provider of exact class of Fragment(f.e. RatesFragment) which creating*/
            final Class<?> classKey = Class.forName(className);
            /*look for relevant provider in a Map*/
            final Provider<Fragment> provider = providers.get(classKey);
            if (provider != null) {
                /*Provides a fully-constructed and injected instance of T.*/
                return provider.get();
            }
        } catch (ClassNotFoundException e) {
            Timber.e(e);
        }
        /*use default instantiating of Fragment if no provider(=no such Fragment in a Map) or exception catched*/
        return super.instantiate(classLoader, className);
    }
}
