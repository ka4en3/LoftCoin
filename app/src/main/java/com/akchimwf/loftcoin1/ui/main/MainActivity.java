package com.akchimwf.loftcoin1.ui.main;

import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.FragmentFactory;
import androidx.navigation.NavController;
import androidx.navigation.Navigation;
import androidx.navigation.ui.AppBarConfiguration;
import androidx.navigation.ui.NavigationUI;

import android.content.Context;
import android.os.Bundle;

import com.akchimwf.loftcoin1.BaseComponent;
import com.akchimwf.loftcoin1.LoftApp;
import com.akchimwf.loftcoin1.R;
import com.akchimwf.loftcoin1.databinding.ActivityMainBinding;

import javax.inject.Inject;

public class MainActivity extends AppCompatActivity {

    private NavController navController;

    /*store MainUIComponent in MainActivity -> same lifecycle for all dependency objects in this Component */
    private MainUIComponent component;

    /*Injection to a field, as constructor of activity is not accessible*/
    @Inject
    FragmentFactory fragmentFactory;   //can't be private

    /*Set the base context for this ContextWrapper. All calls will then be delegated to the base context. */
    /*Activity created and attached to App -> the best place to get AppComponent*/
    @Override
    protected void attachBaseContext(Context newBase) {

        super.attachBaseContext(newBase);  //Context attached to MainActivity

        /*get Application(=LoftApp) -> get BaseComponent(=AppComponent)*/
        BaseComponent baseComponent = ((LoftApp) newBase.getApplicationContext()).getComponent();

        /*get the MainUIComponent in MainActivity, setting BaseComponent as dependency*/
        /*DaggerMainUIComponent.Builder autogenerated*/
        component = DaggerMainUIComponent.builder()
                .baseComponent(baseComponent)
                .build();

        /*make injection to MainActivity*/
        component.injectToMainActivity(this);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        /*override FragmentFactory to have possibility to @Inject in Fragment constructor*/
        /*this should happen before inflating of activity_main (ActivityMainBinding)*/
        getSupportFragmentManager().setFragmentFactory(fragmentFactory);

        /*ActivityMainBinding class comes from 'viewBinding' at build.grade*/
        final ActivityMainBinding binding = ActivityMainBinding.inflate(getLayoutInflater());
        setSupportActionBar(binding.toolbar);
        /*setContentView needs View -> use getRoot()*/
        setContentView(binding.getRoot());

        navController = Navigation.findNavController(this, R.id.main_host);
        /*Sets up a NavigationBarView for use with a NavController.*/
        NavigationUI.setupWithNavController(binding.bottomNav, navController);
        /*Sets up a Toolbar for use with a NavController.*/
        /*AppBarConfiguration stands for disable navigate_back_button in a toolbar, instead set AppBarConfiguration with Menu of the bottomNav*/
        NavigationUI.setupWithNavController(binding.toolbar, navController, new AppBarConfiguration
                .Builder(binding.bottomNav.getMenu())
                .build());
    }

    @Override
    protected void onResume() {
        super.onResume();
        /*Navigate to current page to set correct Title at least*/
        navController.navigate(navController.getCurrentDestination().getId());
    }
}