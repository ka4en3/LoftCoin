package com.akchimwf.loftcoin1.fcm;

import androidx.annotation.NonNull;

import com.akchimwf.loftcoin1.BaseComponent;
import com.akchimwf.loftcoin1.LoftApp;
import com.akchimwf.loftcoin1.R;
import com.akchimwf.loftcoin1.ui.main.MainActivity;
import com.akchimwf.loftcoin1.util.Notifier;
import com.google.firebase.messaging.FirebaseMessagingService;
import com.google.firebase.messaging.RemoteMessage;

import java.util.Objects;

import javax.inject.Inject;

import io.reactivex.disposables.CompositeDisposable;

/*custom realization of FCM*/
public class FcmService extends FirebaseMessagingService {

    /*container with disposable objects - those objects which returns after subscription to RxJava stream*/
    private final CompositeDisposable disposable = new CompositeDisposable();

    /*store FcmComponent in MainActivity -> same lifecycle for all dependency objects in this Component */
    private FcmComponent component;

    /*Injection to a field, as constructor of service is not accessible*/
    @Inject
    Notifier notifier;   //can't be private

    @Override
    public void onCreate() {
        super.onCreate();

        /*get Application(=LoftApp) -> get BaseComponent(=AppComponent)*/
        BaseComponent baseComponent = ((LoftApp) getApplication().getApplicationContext()).getComponent();

        /*get the FcmComponent, setting BaseComponent as dependency*/
        /*DaggerFcmComponent.Builder autogenerated*/
        component = DaggerFcmComponent.builder()
                .baseComponent(baseComponent)
                .build();

        /*make injection to MainActivity*/
        component.injectToFcmService(this);
    }

    @Override
    public void onMessageReceived(@NonNull RemoteMessage message) {
        final RemoteMessage.Notification notification = message.getNotification();
        if (notification != null) {
            notifier.sendMessage(
                            /*getTitle() and getBody() are @Nullable, so ->*/
                            /*Returns the result of calling toString on the first argument if the first argument is not null and returns the second argument otherwise.*/
                            /*another way to handle with possible String NULL exceptions*/
                            Objects.toString(notification.getTitle(), getString(R.string.app_name)),
                            Objects.toString(notification.getBody(), "Something wrong with message body!"),
                            MainActivity.class)
                    .subscribe();   //react way -> needs to subscribe
        }
    }

    @Override
    public void onNewToken(@NonNull String token) {
        super.onNewToken(token);
    }

    @Override
    public void onDestroy() {
        disposable.dispose();  //Dispose the resource, the operation should be idempotent.
        super.onDestroy();
    }
}
