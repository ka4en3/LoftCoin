package com.akchimwf.loftcoin.data;

import androidx.annotation.NonNull;

import com.akchimwf.loftcoin.BuildConfig;
import com.squareup.moshi.Moshi;

import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.ResponseBody;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.moshi.MoshiConverterFactory;

/*implementation of CoinsRepo interface according to CoinMarketCap coins list*/
/*this is Data Layer according to Clean Architecture*/
public class CmcCoinsRepo implements CoinsRepo {
    private final CmcAPI api;

    public CmcCoinsRepo() {
        /*create instance of CmcAPI*/
        /*Retrofit.create -> Single-interface proxy creation guarded by parameter safety.*/
        /*Create an implementation of the API endpoints defined by the service(CmcAPI) interface.*/
        api = createRetrofit(createHttpClient()).create(CmcAPI.class);
    }

    @NonNull
    @Override
    public List<? extends Coin> listings(@NonNull String currency) throws IOException {
        final Response<Listings> response = api.listings(currency).execute();

        if (response.isSuccessful()) {
            final Listings listings = response.body();
            if (listings != null) {
                return listings.data();
            }
        } else {
            final ResponseBody responseBody = response.errorBody();
            if (responseBody != null) {
                throw new IOException(responseBody.string());
            }
        }
        /*in other cases return empty list*/
        return Collections.emptyList();
    }

    /*creating OkHttpClient*/
    private OkHttpClient createHttpClient() {
        final OkHttpClient.Builder builder = new OkHttpClient.Builder();
        /*add Interceptor interface, implementing its method "public Response intercept(@NonNull Chain chain)" with a lambda*/
        builder.addInterceptor(chain -> {
            /*get Request*/
            final Request request = chain.request();
            /*modify Request with API_KEY*/
            return chain.proceed(request.newBuilder()
                    .addHeader(CmcAPI.API_KEY, BuildConfig.API_KEY)
                    .build()
            );
        });
        /*add logging Interceptor*/
        if (BuildConfig.DEBUG) {
            final HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();
            /*set to log HEADERS*/
            interceptor.setLevel(HttpLoggingInterceptor.Level.HEADERS);
            interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);
            /*set NOT ot log API_KEY*/
            /*The logs generated by this interceptor when using the HEADERS or BODY levels
            have the potential to leak sensitive information such as "Authorization" or "Cookie" headers
            and the contents of request and response bodies. This data should only be logged in a controlled way
            or in a non-production environment.
            You can redact headers that may contain sensitive information by calling redactHeader().*/
            interceptor.redactHeader(CmcAPI.API_KEY);
            builder.addInterceptor(interceptor);
        }
        /*return instance of OkHttpClient*/
        return builder.build();
    }

    /*creating Retrofit setting with OkHttpClient*/
    private Retrofit createRetrofit(OkHttpClient httpClient) {
        final Retrofit.Builder builder = new Retrofit.Builder();
        builder.client(httpClient);
        builder.baseUrl(BuildConfig.API_ENDPOINT);
        /*creating instance of Moshi to use its all custom factories later*/
        final Moshi moshi = new Moshi.Builder().build();
        /*set Moshi for parsing JSON*/
        /*Moshi dynamically creates adapters for different classes. But not for abstract classes -> need to re-config Moshi*/
        builder.addConverterFactory(MoshiConverterFactory.create(
                /*Returns a new builder containing all custom factories used by the current instance.*/
                moshi.newBuilder()
                        /*as Coin and Listings class are abstract, Moshi needs exact implementation of its -> add correct adapters*/
                        /*now Moshi can instantiate Coin and Listings classes with set adapters*/
                        .add(Coin.class, moshi.adapter(AutoValue_Coin.class))
                        .add(Listings.class, moshi.adapter(AutoValue_Listings.class))
                        .build()
        ));
        /*return instance of Retrofit*/
        return builder.build();
    }
}
